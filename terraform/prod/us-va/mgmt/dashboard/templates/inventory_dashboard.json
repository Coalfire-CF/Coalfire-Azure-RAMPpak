{
  "lenses": {
    "0": {
      "order": 0,
      "parts": {
        "0": {
          "position": {
            "x": 0,
            "y": 0,
            "colSpan": 10,
            "rowSpan": 4
          },
          "metadata": {
            "inputs": [
              {
                "name": "partTitle",
                "value": "Resources By Region",
                "isOptional": true
              },
              {
                "name": "query",
                "value": "summarize count() by location | project location, total=count_| order by total desc \r\n| project location, total",
                "isOptional": true
              },
              {
                "name": "chartType",
                "isOptional": true
              },
              {
                "name": "isShared",
                "isOptional": true
              },
              {
                "name": "queryId",
                "value": "/subscriptions/25e052ab-016a-4f1f-975c-527197874987/resourceGroups/use2-mp-tm-management-rg/providers/microsoft.resourcegraph/queries/Resources By Region",
                "isOptional": true
              },
              {
                "name": "formatResults",
                "value": true,
                "isOptional": true
              },
              {
                "name": "queryScope",
                "isOptional": true
              }
            ],
            "type": "Extension/HubsExtension/PartType/ArgQueryGridTile",
            "settings": {}
          }
        },
        "1": {
          "position": {
            "x": 0,
            "y": 4,
            "colSpan": 18,
            "rowSpan": 8
          },
          "metadata": {
            "inputs": [
              {
                "name": "partTitle",
                "value": "VirtualMachineInventory",
                "isOptional": true
              },
              {
                "name": "query",
                "value": "// Run query to see results.\nresources\n| where type in~ (\n        \"microsoft.compute/virtualmachines\",\n        \"microsoft.scvmm/virtualmachines\",\n\t\t\"microsoft.connectedvmwarevsphere/virtualmachines\",\n\t\t\"microsoft.azurestackhci/virtualmachines\")\n| mvexpand nic=properties.networkProfile.networkInterfaces limit 400\n| extend nicId = tostring(tolower(nic.id))\n| extend powerState = coalesce(properties.powerState, properties.status.powerState, tostring(split(tolower(properties.extended.instanceView.powerState.code), \"powerstate/\")[1]))\n| extend provisioningState = tostring(properties.provisioningState)\n| extend vmSize = coalesce(tostring(properties.hardwareProfile.vmSize), '-')\n| extend OS = case(\n\t\t\tproperties.storageProfile.osDisk.osType =~ 'Windows' or properties.osProfile.osType =~ 'Windows', 'Windows',\n\t\t\tproperties.storageProfile.osDisk.osType =~ 'Linux' or properties.osProfile.osType =~ 'Linux', 'Linux',\n\t\t\t'-'\n\t\t)\n| extend Status = case(\n            provisioningState =~ 'CREATING', 'Creating',\n            provisioningState =~ 'DELETING', 'Deleting',\n            (provisioningState =~ 'FAILED' and isnotnull(powerState) and isnotempty(powerState)), case(\n                powerState =~ 'RUNNING', 'Running',\n                powerState =~ 'POWEREDON', 'Running',\n                powerState =~ 'STOPPED', 'Stopped',\n                powerState =~ 'POWEREDOFF', 'Powered off',\n                powerState =~ 'DEALLOCATED', 'Stopped (deallocated)',\n                powerState =~ 'SUSPENDED', 'Suspended',\n                'Unknown'\n            ),\n            provisioningState =~ 'FAILED', 'Failed',\n            (provisioningState =~ 'SUCCEEDED' and isnotnull(powerState) and isnotempty(powerState)), case(\n                powerState =~ 'RUNNING', 'Running',\n                powerState =~ 'POWEREDON', 'Running',\n                powerState =~ 'STOPPED', 'Stopped',\n                powerState =~ 'POWEREDOFF', 'Powered off',\n                powerState =~ 'DEALLOCATED', 'Stopped (deallocated)',\n                powerState =~ 'SUSPENDED', 'Suspended',\n                powerState =~ 'STARTING', 'Starting',\n                'Unknown'\n            ),\n            (provisioningState =~ 'UPDATING' and isnotnull(powerState) and isnotempty(powerState)), case(\n                powerState =~ 'DEALLOCATING', 'Deallocating',\n                powerState =~ 'RUNNING', 'Running',\n                powerState =~ 'STARTING', 'Starting',\n                powerState =~ 'STOPPING', 'Stopping',\n                'Updating'\n            ),\n            'Unknown'\n        )\n| join kind=leftouter hint.strategy=shuffle (data \n            | where type =~ 'Microsoft.Network/networkInterfaces' \n            | extend ipConfigsCount=array_length(properties.ipConfigurations) \n            | extend nsgAttachment = properties.networkSecurityGroup\n            | mvexpand ipconfig=properties.ipConfigurations limit 400\n            | where ipConfigsCount == 1 or ipconfig.properties.primary =~ 'true' \n            | parse kind=regex tostring(ipconfig.properties.subnet.id) with '/virtualNetworks/' virtualNetwork '/subnets/' subnet \n            | parse kind=regex nsgAttachment with '/networkSecurityGroups/' nsg '\\\"' null\n            | project\n                nicId=tolower(id),\n                privateIPAddress=tostring(ipconfig.properties.privateIPAddress),\n                subnet,\n                virtualNetwork,\n                nsg)\n        on nicId\n| project id,resourceGroup,location,subscriptionId,Status,OS,VMSize=vmSize,privateIPAddress,virtualNetwork,subnet,nsg\n| sort by (tolower(tostring(id))) asc",
                "isOptional": true
              },
              {
                "name": "chartType",
                "isOptional": true
              },
              {
                "name": "isShared",
                "isOptional": true
              },
              {
                "name": "queryId",
                "value": "c491cb25-b298-4a95-a396-5c796f20bf29",
                "isOptional": true
              },
              {
                "name": "formatResults",
                "value": "true",
                "isOptional": true
              },
              {
                "name": "queryScope",
                "value": {
                  "scope": 0,
                  "values": []
                },
                "isOptional": true
              }
            ],
            "type": "Extension/HubsExtension/PartType/ArgQueryGridTile",
            "settings": {}
          }
        },
        "2": {
          "position": {
            "x": 0,
            "y": 12,
            "colSpan": 10,
            "rowSpan": 5
          },
          "metadata": {
            "inputs": [
              {
                "name": "partTitle",
                "value": "PublicIpInventory",
                "isOptional": true
              },
              {
                "name": "query",
                "value": "Resources\r\n| where type contains 'publicIPAddresses' and isnotempty(properties.ipAddress)\r\n| extend fqdn = coalesce(properties.dnsSettings.fqdn, '-')\r\n| project properties.ipAddress, fqdn, name",
                "isOptional": true
              },
              {
                "name": "chartType",
                "isOptional": true
              },
              {
                "name": "isShared",
                "isOptional": true
              },
              {
                "name": "queryId",
                "value": "/subscriptions/25e052ab-016a-4f1f-975c-527197874987/resourceGroups/use2-mp-tm-management-rg/providers/microsoft.resourcegraph/queries/PublicIpInventory",
                "isOptional": true
              },
              {
                "name": "formatResults",
                "value": true,
                "isOptional": true
              },
              {
                "name": "queryScope",
                "isOptional": true
              }
            ],
            "type": "Extension/HubsExtension/PartType/ArgQueryGridTile",
            "settings": {}
          }
        },
        "3": {
          "position": {
            "x": 0,
            "y": 17,
            "colSpan": 10,
            "rowSpan": 5
          },
          "metadata": {
            "inputs": [
              {
                "name": "partTitle",
                "value": "StorageAccountInventory",
                "isOptional": true
              },
              {
                "name": "query",
                "value": "Resources\r\n| where type =~ 'microsoft.storage/storageaccounts'\r\n| project name, kind, location, resourceGroup, subscriptionId, sku.name",
                "isOptional": true
              },
              {
                "name": "chartType",
                "isOptional": true
              },
              {
                "name": "isShared",
                "isOptional": true
              },
              {
                "name": "queryId",
                "value": "/subscriptions/25e052ab-016a-4f1f-975c-527197874987/resourceGroups/use2-mp-tm-management-rg/providers/microsoft.resourcegraph/queries/StorageAccountInventory",
                "isOptional": true
              },
              {
                "name": "formatResults",
                "value": true,
                "isOptional": true
              },
              {
                "name": "queryScope",
                "isOptional": true
              }
            ],
            "type": "Extension/HubsExtension/PartType/ArgQueryGridTile",
            "settings": {}
          }
        },
        "4": {
          "position": {
            "x": 0,
            "y": 22,
            "colSpan": 10,
            "rowSpan": 6
          },
          "metadata": {
            "inputs": [
              {
                "name": "partTitle",
                "value": "DatabaseInventory",
                "isOptional": true
              },
              {
                "name": "query",
                "value": "resources\r\n| where type in~ (\r\n    \"microsoft.dbforpostgresql/servers\",\r\n    \"Microsoft.Sql/servers\",\r\n    \"microsoft.documentdb/databaseaccounts\",\r\n    \"microsoft.dbformysql/servers\",\r\n    \"microsoft.cache/redis\",\r\n    \"microsoft.cache/redisenterprise\")\r\n| project id, FQDN = properties.fullyQualifiedDomainName,type,resourceGroup,location,subscriptionId",
                "isOptional": true
              },
              {
                "name": "chartType",
                "isOptional": true
              },
              {
                "name": "isShared",
                "isOptional": true
              },
              {
                "name": "queryId",
                "value": "da6ce9bb-c3e3-418f-8370-68e2bd94f978",
                "isOptional": true
              },
              {
                "name": "formatResults",
                "value": "true",
                "isOptional": true
              },
              {
                "name": "queryScope",
                "value": {
                  "scope": 0,
                  "values": []
                },
                "isOptional": true
              }
            ],
            "type": "Extension/HubsExtension/PartType/ArgQueryGridTile",
            "settings": {}
          }
        },
        "5": {
          "position": {
            "x": 0,
            "y": 28,
            "colSpan": 10,
            "rowSpan": 6
          },
          "metadata": {
            "inputs": [
              {
                "name": "partTitle",
                "value": "AksInventory",
                "isOptional": true
              },
              {
                "name": "query",
                "value": "// Run query to see results.\nresources\n| where type in~ (\"microsoft.kubernetes/connectedclusters\", \"microsoft.containerservice/managedclusters\")\n| extend kubernetesVersion = properties.kubernetesVersion\n| project id, name, type, location, subscriptionId, resourceGroup, tags, kind, kubernetesVersion\n| extend typeDisplayName=case(type =~ 'microsoft.kubernetes/connectedclusters','Kubernetes - Azure Arc',type =~ 'microsoft.containerservice/managedclusters','Kubernetes service',type)\n| extend locationDisplayName=case(location =~ 'usgovvirginia','USGov Virginia',location =~ 'global','Global',location =~ 'usgovarizona','USGov Arizona',location =~ 'usdodcentral','USDoD Central',location =~ 'usdodeast','USDoD East',location =~ 'usgoviowa','USGov Iowa',location =~ 'usgovtexas','USGov Texas',location)\n| extend subscriptionDisplayName=case(subscriptionId =~ 'adeb2319-66ac-4767-a576-bc58741211ea','ath-gov-prod',subscriptionId =~ '10074465-4f97-4f3c-9a3d-d70b9cfa6042','awb-gov-prod',subscriptionId =~ 'cae2d92b-3955-4501-946a-8c4bcf5a5210','edl-gov-prod',subscriptionId =~ '052fdfa2-4ad1-4721-80e1-9cba50fba313','psd-gov-prod',subscriptionId =~ '841eb88b-ee5f-444b-88c9-016b6a1d40bc','sae-gov-prod',subscriptionId =~ 'e3d5f2e0-3f47-434f-b7ab-d3be4d81cce9','sdl-gov-prod',subscriptionId =~ 'b091e832-978c-4f0b-ad94-a58edda6adfd','spark-gov-prod',subscriptionId =~ '8a8a7489-6f83-467d-bf37-cc323b7b172b','v1platform-gov-prod',subscriptionId =~ '7a896fea-ca87-4889-89f1-b221ba3a8921','vog-mgmt',subscriptionId)\n| where (type =~ ('microsoft.containerregistry/registries'))\n| where (type !~ ('microsoft.portalservices/extensions'))\n| where (type !~ ('microsoft.portalservices/extensions/slots'))\n| where (type !~ ('microsoft.portalservices/extensions/versions'))\n| where (type !~ ('microsoft.hdinsight/clusterpools/clusters'))\n| where (type !~ ('microsoft.hdinsight/clusterpools/clusters/sessionclusters'))\n| where (type !~ ('microsoft.hdinsight/clusterpools'))\n| where (type !~ ('microsoft.hpcworkbench/instances/chambers'))\n| where (type !~ ('microsoft.hpcworkbench/instances/chambers/accessprofiles'))\n| where (type !~ ('microsoft.hpcworkbench/instances/chambers/files'))\n| where (type !~ ('microsoft.hpcworkbench/instances/chambers/requests'))\n| where (type !~ ('microsoft.hpcworkbench/instances/chambers/licenses'))\n| where (type !~ ('microsoft.hpcworkbench/instances/chambers/storages'))\n| where (type !~ ('microsoft.hpcworkbench/instances/chambers/workloads'))\n| where (type !~ ('microsoft.hpcworkbench/instances/consortiums'))\n| where (type !~ ('microsoft.hpcworkbench/instances'))\n| where (type !~ ('microsoft.hpcworkbench/instances/sharedstorages'))\n| where (type !~ ('microsoft.scvmm/vmmservers'))\n| where (type !~ ('microsoft.connectedvmwarevsphere/vcenters'))\n| where (type !~ ('microsoft.networkfunction/azuretrafficcollectors'))\n| where (type !~ ('microsoft.network/virtualhubs')) or ((kind =~ ('routeserver')))\n| where (type !~ ('microsoft.insights/diagnosticsettings'))\n| where not((type =~ ('microsoft.network/serviceendpointpolicies')) and ((kind =~ ('internal'))))\n| where not((type =~ ('microsoft.synapse/workspaces/sqlpools')) and ((kind =~ ('v3'))))\n| where (type !~ ('microsoft.media/videoanalyzers'))\n| where (type !~ ('microsoft.desktopvirtualization/scalingplans'))\n| where not((type =~ ('microsoft.sql/servers/databases')) and ((kind in~ ('system','v2.0,system','v12.0,system','v12.0,user,datawarehouse,gen2,analytics'))))\n| where not((type =~ ('microsoft.sql/servers')) and ((kind =~ ('v12.0,analytics'))))\n| where (type in~ ('Microsoft.ContainerService/managedClusters','Microsoft.Kubernetes/connectedClusters'))\n| project name,typeDisplayName,resourceGroup,kubernetesVersion,locationDisplayName,subscriptionDisplayName,id,type,kind,location,subscriptionId,tags\n| sort by (tolower(tostring(name))) asc\n| sort by (tolower(tostring(typeDisplayName))) asc",
                "isOptional": true
              },
              {
                "name": "chartType",
                "isOptional": true
              },
              {
                "name": "isShared",
                "isOptional": true
              },
              {
                "name": "queryId",
                "value": "5423938c-720a-4be0-8198-a8578ca15758",
                "isOptional": true
              },
              {
                "name": "formatResults",
                "value": "true",
                "isOptional": true
              },
              {
                "name": "queryScope",
                "value": {
                  "scope": 0,
                  "values": []
                },
                "isOptional": true
              }
            ],
            "type": "Extension/HubsExtension/PartType/ArgQueryGridTile",
            "settings": {}
          }
        },
        "6": {
          "position": {
            "x": 0,
            "y": 34,
            "colSpan": 10,
            "rowSpan": 6
          },
          "metadata": {
            "inputs": [
              {
                "name": "partTitle",
                "value": "FunctionAppInventory",
                "isOptional": true
              },
              {
                "name": "query",
                "value": "resources\r\n| where type == \"microsoft.web/sites\"\r\n| project id,type,resourceGroup,location",
                "isOptional": true
              },
              {
                "name": "chartType",
                "isOptional": true
              },
              {
                "name": "isShared",
                "isOptional": true
              },
              {
                "name": "queryId",
                "value": "b48adf63-9eb0-4e76-94d4-d9c7d5e5d631",
                "isOptional": true
              },
              {
                "name": "formatResults",
                "value": true,
                "isOptional": true
              },
              {
                "name": "queryScope",
                "value": {
                  "scope": 0,
                  "values": []
                },
                "isOptional": true
              }
            ],
            "type": "Extension/HubsExtension/PartType/ArgQueryGridTile",
            "settings": {}
          }
        },
        "7": {
          "position": {
            "x": 0,
            "y": 40,
            "colSpan": 10,
            "rowSpan": 6
          },
          "metadata": {
            "inputs": [
              {
                "name": "partTitle",
                "value": "NetworkServicesInventory",
                "isOptional": true
              },
              {
                "name": "query",
                "value": "resources\r\n| where type =~ 'microsoft.network/virtualnetworks' or type =~ 'microsoft.network/loadbalancers' or type =~ \"microsoft.network/applicationgateways\" or type == \"microsoft.network/azurefirewalls\" or (type =~ 'microsoft.cdn/profiles' and sku.name !~ 'Standard_AzureFrontdoor' and sku.name !~ 'Premium_AzureFrontdoor')\r\n| project id,type,location,resourceGroup,subscriptionId\r\n| sort by (tolower(tostring(type))) asc",
                "isOptional": true
              },
              {
                "name": "chartType",
                "isOptional": true
              },
              {
                "name": "isShared",
                "isOptional": true
              },
              {
                "name": "queryId",
                "value": "b745208a-8f4a-4555-b529-993e6f17d2f9",
                "isOptional": true
              },
              {
                "name": "formatResults",
                "value": true,
                "isOptional": true
              },
              {
                "name": "queryScope",
                "value": {
                  "scope": 0,
                  "values": []
                },
                "isOptional": true
              }
            ],
            "type": "Extension/HubsExtension/PartType/ArgQueryGridTile",
            "settings": {}
          }
        }
      }
    }
  },
  "metadata": {
    "model": {
      "timeRange": {
        "value": {
          "relative": {
            "duration": 24,
            "timeUnit": 1
          }
        },
        "type": "MsPortalFx.Composition.Configuration.ValueTypes.TimeRange"
      }
    }
  }
}